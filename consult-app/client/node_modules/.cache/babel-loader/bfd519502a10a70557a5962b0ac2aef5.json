{"ast":null,"code":"var _jsxFileName = \"/Users/EmilyHPark_1/codeworks/Course/Week-8/consult-sched/consult-app/client/src/DoctorList/DoctorList.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport './DoctorList.css';\nimport Doctor from '../Doctor/Doctor';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function DoctorList(props) {\n  _s();\n\n  const [allDoctors, setAllDoctors] = useState([]);\n  const [searchTerm, setSearchTerm] = useState([]);\n  useEffect(() => {\n    axios.get('https://ep-doctor-api.herokuapp.com/doctors').then(response => {\n      setAllDoctors(response.data);\n    });\n  }, []);\n\n  function showDoctors(arr) {\n    const firstNum = Math.floor(Math.random() * 20);\n    return arr.slice(firstNum, Math.floor(Math.random() * 40)).map(doctor => {\n      return /*#__PURE__*/_jsxDEV(Doctor, {\n        doctor: doctor\n      }, doctor.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 21,\n        columnNumber: 17\n      }, this);\n    });\n  }\n\n  function filterDoctors(arr, searchTerm) {\n    //filter doctors based on input value??\n    return arr.filter(searchTerm => {\n      //filter has to have a RETURN\n      // if(arr.includes(searchTerm.toLowerCase())) {\n      return arr.map(doctor => {\n        return /*#__PURE__*/_jsxDEV(Doctor, {\n          doctor: doctor\n        }, doctor, false, {\n          fileName: _jsxFileName,\n          lineNumber: 33,\n          columnNumber: 28\n        }, this);\n      }); // }\n    });\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"doctor-list\",\n    id: \"list\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"search-box\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Search for a doctor by drug expertise\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Search for a drug\",\n        value: searchTerm,\n        onChange: event => setSearchTerm(event.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: filterDoctors,\n        children: \"Search\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"filtered-doctors\",\n      children: searchTerm.length > 5 ? filterDoctors(allDoctors) : showDoctors(allDoctors)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"filtered-doctors\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 9\n  }, this);\n}\n\n_s(DoctorList, \"B7lb8lJunmS4WdvIJh8IC/ZS6Ec=\");\n\n_c = DoctorList;\n\nvar _c;\n\n$RefreshReg$(_c, \"DoctorList\");","map":{"version":3,"sources":["/Users/EmilyHPark_1/codeworks/Course/Week-8/consult-sched/consult-app/client/src/DoctorList/DoctorList.js"],"names":["React","useState","useEffect","Doctor","axios","DoctorList","props","allDoctors","setAllDoctors","searchTerm","setSearchTerm","get","then","response","data","showDoctors","arr","firstNum","Math","floor","random","slice","map","doctor","id","filterDoctors","filter","event","target","value","length"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,QAAf,EAAyBC,SAAzB,QAAyC,OAAzC;AACA,OAAO,kBAAP;AACA,OAAOC,MAAP,MAAmB,kBAAnB;AACA,OAAOC,KAAP,MAAkB,OAAlB;;AAEA,eAAe,SAASC,UAAT,CAAoBC,KAApB,EAA2B;AAAA;;AACtC,QAAM,CAACC,UAAD,EAAaC,aAAb,IAA8BP,QAAQ,CAAC,EAAD,CAA5C;AACA,QAAM,CAACQ,UAAD,EAAaC,aAAb,IAA8BT,QAAQ,CAAC,EAAD,CAA5C;AAEAC,EAAAA,SAAS,CAAC,MAAK;AACPE,IAAAA,KAAK,CAACO,GAAN,CAAU,6CAAV,EACCC,IADD,CACMC,QAAQ,IAAI;AAClBL,MAAAA,aAAa,CAACK,QAAQ,CAACC,IAAV,CAAb;AACH,KAHG;AAIP,GALQ,EAKP,EALO,CAAT;;AAOA,WAASC,WAAT,CAAqBC,GAArB,EAA0B;AACtB,UAAMC,QAAQ,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAc,EAAzB,CAAjB;AACA,WAAOJ,GAAG,CAACK,KAAJ,CAAUJ,QAAV,EAAoBC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgB,EAA3B,CAApB,EAAoDE,GAApD,CAAwDC,MAAM,IAAI;AACrE,0BACI,QAAC,MAAD;AAAwB,QAAA,MAAM,EAAEA;AAAhC,SAAaA,MAAM,CAACC,EAApB;AAAA;AAAA;AAAA;AAAA,cADJ;AAGH,KAJM,CAAP;AAKH;;AAED,WAASC,aAAT,CAAuBT,GAAvB,EAA4BP,UAA5B,EAAwC;AAEpC;AACA,WAAOO,GAAG,CAACU,MAAJ,CAAYjB,UAAD,IAAe;AAC7B;AACA;AACI,aAAOO,GAAG,CAACM,GAAJ,CAAQC,MAAM,IAAI;AACrB,4BAAO,QAAC,MAAD;AAAqB,UAAA,MAAM,EAAEA;AAA7B,WAAaA,MAAb;AAAA;AAAA;AAAA;AAAA,gBAAP;AACH,OAFM,CAAP,CAHyB,CAM7B;AACH,KAPM,CAAP;AAQH;;AAED,sBACI;AAAK,IAAA,SAAS,EAAC,aAAf;AAA6B,IAAA,EAAE,EAAC,MAAhC;AAAA,4BACI;AAAK,MAAA,SAAS,EAAC,YAAf;AAAA,8BACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADA,eAEI;AAAO,QAAA,IAAI,EAAC,MAAZ;AAAmB,QAAA,WAAW,EAAC,mBAA/B;AACA,QAAA,KAAK,EAAEd,UADP;AAEA,QAAA,QAAQ,EAAGkB,KAAD,IAAWjB,aAAa,CAACiB,KAAK,CAACC,MAAN,CAAaC,KAAd;AAFlC;AAAA;AAAA;AAAA;AAAA,cAFJ,eAMI;AAAQ,QAAA,OAAO,EAAEJ,aAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cANJ;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ,eASI;AAAK,MAAA,SAAS,EAAC,kBAAf;AAAA,gBACKhB,UAAU,CAACqB,MAAX,GAAoB,CAApB,GAAwBL,aAAa,CAAClB,UAAD,CAArC,GAAoDQ,WAAW,CAACR,UAAD;AADpE;AAAA;AAAA;AAAA;AAAA,YATJ,eAcI;AAAK,MAAA,SAAS,EAAC;AAAf;AAAA;AAAA;AAAA;AAAA,YAdJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAgCH;;GAjEuBF,U;;KAAAA,U","sourcesContent":["import React, {useState, useEffect} from 'react';\nimport './DoctorList.css';\nimport Doctor from '../Doctor/Doctor';\nimport axios from 'axios';\n\nexport default function DoctorList(props) {\n    const [allDoctors, setAllDoctors] = useState([]);\n    const [searchTerm, setSearchTerm] = useState([]);\n    \n    useEffect(()=> {\n            axios.get('https://ep-doctor-api.herokuapp.com/doctors')\n            .then(response => {\n            setAllDoctors(response.data)\n        })\n    },[]);\n\n    function showDoctors(arr) {\n        const firstNum = Math.floor(Math.random()*20);\n        return arr.slice(firstNum, Math.floor(Math.random() * 40)).map(doctor => {\n            return (\n                <Doctor key={doctor.id} doctor={doctor}/>\n            )\n        })\n    }\n    \n    function filterDoctors(arr, searchTerm) {\n\n        //filter doctors based on input value??\n        return arr.filter((searchTerm)=> {\n            //filter has to have a RETURN\n            // if(arr.includes(searchTerm.toLowerCase())) {\n                return arr.map(doctor => {\n                    return <Doctor key={doctor} doctor={doctor} />\n                })\n            // }\n        })\n    }\n\n    return(\n        <div className=\"doctor-list\" id=\"list\">\n            <div className=\"search-box\"> \n            <h2>Search for a doctor by drug expertise</h2>\n                <input type=\"text\" placeholder=\"Search for a drug\" \n                value={searchTerm}\n                onChange={(event) => setSearchTerm(event.target.value)}\n                />\n                <button onClick={filterDoctors} >Search</button>\n            </div>\n            <div className=\"filtered-doctors\"> \n                {searchTerm.length > 5 ? filterDoctors(allDoctors) : showDoctors(allDoctors)}\n            </div>\n            \n\n            <div className=\"filtered-doctors\">\n            {/* {filteredData.length !== 0 && (\n                <div className=\"dataResult\">\n                {filteredData.slice(0, 15).map((value, key) => {\n                    return (\n                    <a className=\"dataItem\" href={value.link} >\n                        <p>{value.title} </p>\n                    </a>\n                    );\n                })}\n                </div>\n            )} */}\n            </div>\n        </div>\n    )\n\n\n}"]},"metadata":{},"sourceType":"module"}