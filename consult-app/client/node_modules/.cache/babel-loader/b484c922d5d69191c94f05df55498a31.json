{"ast":null,"code":"var _jsxFileName = \"/Users/EmilyHPark_1/codeworks/Course/Week-8/consult-sched/consult-app/client/src/Contexts/DoctorContext.js\",\n    _s = $RefreshSig$();\n\nimport React, { createContext, useReducer, useEffect } from 'react';\nimport AppReducer from './AppReducer';\nimport { useAuth } from '../Contexts/Authcontext'; //initial state\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst initialState = {\n  appointmentList: localStorage.getItem('appointmentList') ? JSON.parse(localStorage.getItem('appointmentList')) : [],\n  appointmentDone: localStorage.getItem('appointmentDone') ? JSON.parse(localStorage.getItem('appointmentDone')) : []\n}; // create context \n\nexport const DoctorContext = /*#__PURE__*/createContext(initialState); //provider components \n\nexport const DoctorProvider = props => {\n  _s();\n\n  const [state, dispatch] = useReducer(AppReducer, initialState); //use local storage to store appointment list\n  //need to json.stringify bc local storage has to be a string\n\n  useEffect(() => {\n    localStorage.setItem('appointmentList', JSON.stringify(state.appointmentList));\n    localStorage.setItem('appointmentDone', JSON.stringify(state.appointmentDone));\n  }, [state]); //actions\n\n  const {\n    currentUser\n  } = useAuth();\n\n  const addDoctorToApptList = doctor => {\n    // console.log(doctor, \"context\");\n    alert('Your appointment is booked. Look out for an email to ${}');\n    dispatch({\n      type: \"ADD_DOCTOR_TO_LIST\",\n      payload: doctor\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(DoctorContext.Provider, {\n    value: {\n      appointmentList: state.appointmentList,\n      appointmentDone: state.appointmentDone,\n      addDoctorToApptList\n    },\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 9\n  }, this);\n};\n\n_s(DoctorProvider, \"KJpHTY1MyJUYnqYSUd/VLZPejAg=\", false, function () {\n  return [useAuth];\n});\n\n_c = DoctorProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"DoctorProvider\");","map":{"version":3,"sources":["/Users/EmilyHPark_1/codeworks/Course/Week-8/consult-sched/consult-app/client/src/Contexts/DoctorContext.js"],"names":["React","createContext","useReducer","useEffect","AppReducer","useAuth","initialState","appointmentList","localStorage","getItem","JSON","parse","appointmentDone","DoctorContext","DoctorProvider","props","state","dispatch","setItem","stringify","currentUser","addDoctorToApptList","doctor","alert","type","payload","children"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,aAAf,EAA8BC,UAA9B,EAA0CC,SAA1C,QAA0D,OAA1D;AACA,OAAOC,UAAP,MAAuB,cAAvB;AACA,SAAQC,OAAR,QAAsB,yBAAtB,C,CAEA;;;AACA,MAAMC,YAAY,GAAG;AACjBC,EAAAA,eAAe,EAAEC,YAAY,CAACC,OAAb,CAAqB,iBAArB,IACXC,IAAI,CAACC,KAAL,CAAWH,YAAY,CAACC,OAAb,CAAqB,iBAArB,CAAX,CADW,GAEX,EAHW;AAIjBG,EAAAA,eAAe,EAAEJ,YAAY,CAACC,OAAb,CAAqB,iBAArB,IACXC,IAAI,CAACC,KAAL,CAAWH,YAAY,CAACC,OAAb,CAAqB,iBAArB,CAAX,CADW,GAEX;AANW,CAArB,C,CASA;;AACA,OAAO,MAAMI,aAAa,gBAAGZ,aAAa,CAACK,YAAD,CAAnC,C,CAEP;;AACA,OAAO,MAAMQ,cAAc,GAAIC,KAAD,IAAW;AAAA;;AACrC,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBf,UAAU,CAACE,UAAD,EAAaE,YAAb,CAApC,CADqC,CAKrC;AACA;;AACAH,EAAAA,SAAS,CAAC,MAAM;AACZK,IAAAA,YAAY,CAACU,OAAb,CAAqB,iBAArB,EAAwCR,IAAI,CAACS,SAAL,CAAeH,KAAK,CAACT,eAArB,CAAxC;AACAC,IAAAA,YAAY,CAACU,OAAb,CAAqB,iBAArB,EAAwCR,IAAI,CAACS,SAAL,CAAeH,KAAK,CAACJ,eAArB,CAAxC;AACH,GAHQ,EAGP,CAACI,KAAD,CAHO,CAAT,CAPqC,CAYrC;;AAEA,QAAM;AAAEI,IAAAA;AAAF,MAAiBf,OAAO,EAA9B;;AAEA,QAAMgB,mBAAmB,GAAGC,MAAM,IAAI;AAClC;AACAC,IAAAA,KAAK,CAAC,0DAAD,CAAL;AACAN,IAAAA,QAAQ,CAAC;AAACO,MAAAA,IAAI,EAAE,oBAAP;AAA6BC,MAAAA,OAAO,EAAEH;AAAtC,KAAD,CAAR;AACH,GAJD;;AAMA,sBACI,QAAC,aAAD,CAAe,QAAf;AAAwB,IAAA,KAAK,EAAE;AACvBf,MAAAA,eAAe,EAAES,KAAK,CAACT,eADA;AAEvBK,MAAAA,eAAe,EAAEI,KAAK,CAACJ,eAFA;AAGvBS,MAAAA;AAHuB,KAA/B;AAAA,cAKKN,KAAK,CAACW;AALX;AAAA;AAAA;AAAA;AAAA,UADJ;AASH,CA/BM;;GAAMZ,c;UAccT,O;;;KAddS,c","sourcesContent":["import React, {createContext, useReducer, useEffect} from 'react';\nimport AppReducer from './AppReducer';\nimport {useAuth} from '../Contexts/Authcontext';\n\n//initial state\nconst initialState = {\n    appointmentList: localStorage.getItem('appointmentList') \n        ? JSON.parse(localStorage.getItem('appointmentList')) \n        : [],\n    appointmentDone: localStorage.getItem('appointmentDone') \n        ? JSON.parse(localStorage.getItem('appointmentDone')) \n        : []\n};\n\n// create context \nexport const DoctorContext = createContext(initialState);\n\n//provider components \nexport const DoctorProvider = (props) => {\n    const [state, dispatch] = useReducer(AppReducer, initialState);\n\n    \n\n    //use local storage to store appointment list\n    //need to json.stringify bc local storage has to be a string\n    useEffect(() => {\n        localStorage.setItem('appointmentList', JSON.stringify(state.appointmentList));\n        localStorage.setItem('appointmentDone', JSON.stringify(state.appointmentDone));\n    },[state]);\n\n    //actions\n\n    const { currentUser} = useAuth();\n\n    const addDoctorToApptList = doctor => {\n        // console.log(doctor, \"context\");\n        alert('Your appointment is booked. Look out for an email to ${}');\n        dispatch({type: \"ADD_DOCTOR_TO_LIST\", payload: doctor});\n    }\n\n    return (\n        <DoctorContext.Provider value={{\n                appointmentList: state.appointmentList, \n                appointmentDone: state.appointmentDone, \n                addDoctorToApptList\n        }}> \n            {props.children}\n        </DoctorContext.Provider>\n    );\n};"]},"metadata":{},"sourceType":"module"}