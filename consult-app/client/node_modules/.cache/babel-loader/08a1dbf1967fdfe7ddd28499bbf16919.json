{"ast":null,"code":"var _jsxFileName = \"/Users/EmilyHPark_1/codeworks/Course/Week-8/consult-sched/consult-app/client/src/DoctorList/DoctorList.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport './DoctorList.css';\nimport Doctor from '../Doctor/Doctor';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function DoctorList(props) {\n  _s();\n\n  const [allDoctors, setAllDoctors] = useState([]);\n  const [searchTerm, setSearchTerm] = useState([]);\n  useEffect(() => {\n    axios.get('https://ep-doctor-api.herokuapp.com/doctors').then(response => {\n      setAllDoctors(response.data);\n    });\n  }, []);\n\n  function showDoctors(arr) {\n    const firstNum = Math.floor(Math.random() * 20);\n    const lastNum = firstNum + Math.floor(Math.random() * 20);\n    return arr.slice(firstNum, lastNum).map(doctor => {\n      return /*#__PURE__*/_jsxDEV(Doctor, {\n        doctor: doctor\n      }, doctor.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 22,\n        columnNumber: 17\n      }, this);\n    });\n  }\n\n  function filterDoctors(arr) {\n    console.log(\"hi\");\n    console.log(arr[9]);\n    console.log(arr.doctor); //filter doctors based on input value??\n\n    for (let i = 0; i < arr.length; i++) {\n      if (array[i].drug_list.includes(searchTerm)) {\n        return arr.drug_list.includes(searchTerm.toLowerCase())( /*#__PURE__*/_jsxDEV(Doctor, {\n          doctor: arr.doctor\n        }, arr.doctor.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 36,\n          columnNumber: 25\n        }, this));\n      }\n    }\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"doctor-list\",\n    id: \"list\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"search-box\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Search For A Doctor By Drug Expertise:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Search for a drug\",\n        value: searchTerm,\n        onChange: event => setSearchTerm(event.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        id: \"search-button\",\n        onClick: filterDoctors,\n        children: \"Search\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"filtered-doctors-list\",\n      children: searchTerm.length ? filterDoctors(allDoctors) : showDoctors(allDoctors)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 9\n  }, this);\n}\n\n_s(DoctorList, \"B7lb8lJunmS4WdvIJh8IC/ZS6Ec=\");\n\n_c = DoctorList;\n\nvar _c;\n\n$RefreshReg$(_c, \"DoctorList\");","map":{"version":3,"sources":["/Users/EmilyHPark_1/codeworks/Course/Week-8/consult-sched/consult-app/client/src/DoctorList/DoctorList.js"],"names":["React","useState","useEffect","Doctor","axios","DoctorList","props","allDoctors","setAllDoctors","searchTerm","setSearchTerm","get","then","response","data","showDoctors","arr","firstNum","Math","floor","random","lastNum","slice","map","doctor","id","filterDoctors","console","log","i","length","array","drug_list","includes","toLowerCase","event","target","value"],"mappings":"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","sourcesContent":["import React, {useState, useEffect} from 'react';\nimport './DoctorList.css';\nimport Doctor from '../Doctor/Doctor';\nimport axios from 'axios';\n\nexport default function DoctorList(props) {\n    const [allDoctors, setAllDoctors] = useState([]);\n    const [searchTerm, setSearchTerm] = useState([]);\n    \n    useEffect(()=> {\n            axios.get('https://ep-doctor-api.herokuapp.com/doctors')\n            .then(response => {\n            setAllDoctors(response.data)\n        })\n    },[]);\n\n    function showDoctors(arr) {\n        const firstNum = Math.floor(Math.random()*20);\n        const lastNum = firstNum + Math.floor(Math.random()*20);\n        return arr.slice(firstNum, lastNum).map(doctor => {\n            return (\n                <Doctor key={doctor.id} doctor={doctor}/>\n            )\n        })\n    }\n    \n    function filterDoctors(arr) {\n        console.log(\"hi\")\n        console.log(arr[9]);\n        console.log(arr.doctor);\n        //filter doctors based on input value??\n        for(let i=0;i<arr.length; i++) {\n            if(array[i].drug_list.includes(searchTerm)) {\n                return arr.drug_list.includes(searchTerm.toLowerCase()) \n                    ( \n                        <Doctor key={arr.doctor.id} doctor={arr.doctor} />\n                    )\n            }\n        }\n    }\n\n    return(\n        <div className=\"doctor-list\" id=\"list\">\n            <div className=\"search-box\"> \n            <h2>Search For A Doctor By Drug Expertise:</h2>\n                <input type=\"text\" placeholder=\"Search for a drug\" \n                value={searchTerm}\n                onChange={(event) => setSearchTerm(event.target.value)}\n                />\n                <button id=\"search-button\" onClick={filterDoctors} >Search</button>\n            </div>\n            <div className=\"filtered-doctors-list\"> \n                {searchTerm.length ? filterDoctors(allDoctors) : showDoctors(allDoctors)}\n            </div>\n        </div>\n    )\n\n\n}"]},"metadata":{},"sourceType":"module"}